<?xml version="1.0" encoding="UTF-8"?>
<project default="test" name="jitsi-meet-torture">

    <property name="dest" value="classes"/>
    <property name="test.reports.dir" value="test-reports"/>
    <property name="test.html.reports.dir" value="${test.reports.dir}/html"/>

    <path id="compile.class.path">
        <path refid="project.class.path"/>
        <fileset dir="lib">
            <include name="ant.jar"/>
        </fileset>
    </path>

    <path id="project.class.path">
        <pathelement location="${dest}"/>

        <fileset dir="lib">
            <include name="**/*.jar"/>
            <exclude name="ant.jar"/>
        </fileset>
    </path>

    <!-- windows specific properties -->
    <condition property="is.running.windows" value="${os.name}">
        <os family="windows"/>
    </condition>
    <condition property="lib.native.path" value="lib/native/windows">
        <isset property="is.running.windows"/>
    </condition>

    <!-- linux specific properties -->
    <condition property="is.running.linux" value="${os.name}">
        <equals arg1="${os.name}" arg2="linux"
                casesensitive="false" trim="true"/>
    </condition>
    <condition property="lib.native.path" value="lib/native/linux-64">
        <and>
            <equals
                arg1="${os.name}"
                arg2="linux"
                casesensitive="false"
                trim="true"/>
            <os arch="amd64" />
        </and>
    </condition>
    <condition property="lib.native.path" value="lib/native/linux">
        <and>
            <equals
                arg1="${os.name}"
                arg2="linux"
                casesensitive="false"
                trim="true"/>
            <os arch="i386" />
        </and>
    </condition>

    <!-- macosx specific properties -->
    <condition property="is.running.macosx" value="${os.name}">
        <os family="mac"/>
    </condition>
    <condition property="lib.native.path" value="lib/native/macosx">
        <isset property="is.running.macosx"/>
    </condition>

    <!-- webdriver binary property -->
    <condition property="webdriver.chrome.driver"
               value="${lib.native.path}/chromedriver">
        <or>
            <isset property="is.running.macosx"/>
            <isset property="is.running.linux"/>
        </or>
    </condition>
    <condition property="webdriver.chrome.driver"
               value="${lib.native.path}/chromedriver.exe">
            <isset property="is.running.windows"/>
    </condition>

    <property environment="env"/>

    <!--<property name="jitsi-meet.instance.url"-->
              <!--value="https://meet.example.com"/>-->

    <!-- default target -->
    <target name="test" depends="compile,clean-test-reports,check-linux-env">

        <!-- Fail if we have't setup what to test -->
        <fail unless="jitsi-meet.instance.url"
              message="Please setup the property jitsi-meet.instance.url
with the address of the instance to test (add to the command line
-Djitsi-meet.instance.url=&quot;https://meet.example.com&quot;"/>

        <junit printsummary="yes"
               fork="yes"
               haltonfailure="no"
               showoutput="yes"
               failureproperty="testing.failed">
            <classpath refid="project.class.path"/>
            <formatter type="xml"/>
            <sysproperty key="webdriver.chrome.driver"
                         value="${webdriver.chrome.driver}"/>
            <sysproperty key="jitsi-meet.instance.url"
                         value="${jitsi-meet.instance.url}"/>

            <!-- The main test suite which will add all tests -->
            <test name="org.jitsi.meet.test.TestsRunner"
                  todir="${test.reports.dir}"/>
            <!-- this is xml formatter -->
            <formatter classname="org.jitsi.meet.test.FailureListener"
                usefile="false"/>
        </junit>

        <junitreport todir="${test.reports.dir}">
            <fileset dir="${test.reports.dir}">
                <include name="*.xml"/>
            </fileset>
            <report format="frames" todir="${test.html.reports.dir}"/>
        </junitreport>

        <!-- Check whether testing went alright and fail if not.-->
        <fail if="testing.failed"/>
    </target>

    <!-- compiles project -->
    <target name="compile" depends="init">
        <javac classpathref="compile.class.path"
               debug="true"
               deprecation="true" destdir="${dest}"
               nowarn="false"
               includeantruntime="false"
               source="1.6" target="1.6"
               fork="true">
            <src path="src"/>
            <include name="**/*.java" />
        </javac>
    </target>

    <target name="init">
        <mkdir dir="${dest}"/>
    </target>

    <!-- clean -->
    <target name="clean"
        description="Remove all generated files and prepare for a clean build.">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${dest}"/>
        </delete>
    </target>

    <!-- internal target - removes the current set of test reports, so
         residual data is not left to confuse a cached browser -->
    <target name="clean-test-reports">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${test.reports.dir}"/>
        </delete>
        <mkdir dir="${test.reports.dir}"/>
    </target>

    <target name="check-linux-env" if="is.running.linux">
        <fail unless="env.DISPLAY">No DISPLAY environment variable.
Its seems you are running headless linux and have no DISPLAY set.
Make sure you start xvfb:
$ Xvfb :1 -screen 5 1024x768x8 &amp;
$ export DISPLAY=:1.5
        </fail>
    </target>

</project>
